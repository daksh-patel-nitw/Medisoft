import React, { useState } from 'react';
import TableSortLabel from '@material-ui/core/TableSortLabel';
import {
    Grid,
    Table,
    TableBody,
    TableCell,
    TableContainer,
    TableHead,
    TableRow,
    Button,
    TextField,
    IconButton,
    TablePagination,
} from '@material-ui/core';
import Card from '@material-ui/core/Card';
import CardContent from '@material-ui/core/CardContent';
import PageLayout from './pageLayout';

import Autocomplete from '@material-ui/lab/Autocomplete';
import { Delete, Edit } from '@material-ui/icons';
export default function App()
{

  const [order, setOrder] = useState('asc');
  const [orderBy, setOrderBy] = useState('');


    const [medicines, setMedicines] = useState([
        {
            id: 1,
            name: 'MedABCicine 1',
            pid: 'P00001',
            did: "D00010",
            aid: "eshdkikwiokqmj",
            quantity: 10,
            unit: 'mg',
            price: 20.0,
        },
        {
            id: 2,
            name: 'Medabcicine 2',
            pid: 'P00501',
            did: "D00010",
            aid: "thurkedxwiokqm",
            quantity: 1,
            unit: 'tablet',
            price: 70.0,
        },
        {
            id: 3,
            name: 'Medicine 3',
            pid: 'P00401',
            did: "D00010",
            aid: "uidnehktbvhska",
            quantity: 1,
            unit: 'unit',
            price: 100.0,
        },
    ]);
    const handleSortRequest = (property) => {
      const isAsc = orderBy === property && order === 'asc';
      setOrder(isAsc ? 'desc' : 'asc');
      setOrderBy(property);
      setMedicines((prev) => prev.sort((a, b) => {
        if (isAsc) {
          return a[property] > b[property] ? 1 : -1;
        } else {
          return b[property] > a[property] ? 1 : -1;
        }
      }));
    };

    const [searchValue, setSearchValue] = useState('');

    const handleSearch = (event, newValue) =>
    {   
            setSearchValue(newValue?newValue:'');
    };

    const rowsPerPageOptions = [1, 2, 3];
    const [page, setPage] = useState(0);
    const [rowsPerPage, setRowsPerPage] = useState(rowsPerPageOptions[0]);
  
    const handleChangePage = (event, newPage) => {
      setPage(newPage);
    };
  
    const handleChangeRowsPerPage = (event) => {
      setRowsPerPage(parseInt(event.target.value, 10));
      setPage(0);
    };
    return (

        <PageLayout>
            <Grid container spacing={2}>
                <Grid item spacing={2} xs={12}>
                    <Card className="partition">
                        <CardContent>
                            <Grid spacing={2} xs={6}>
                                <Autocomplete
                                    freeSolo
                                    options={medicines.map((option) => option.pid)}
                                    onChange={handleSearch}
                                    renderInput={(params) => (
                                        <TextField
                                            {...params}
                                            label='Search by Patient id'
                                            margin='normal'
                                            variant='outlined'

                                        />
                                    )}
                                />
                            </Grid>
                            <Grid spacing={2} xs={6}>
                                <Autocomplete
                                    freeSolo
                                    options={medicines.map((option) => option.name)}
                                    onChange={handleSearch}
                                    renderInput={(params) => (
                                        <TextField
                                            {...params}
                                            label='Search by medicine name'
                                            margin='normal'
                                            variant='outlined'

                                        />
                                    )}
                                />
                            </Grid>
                            <TableContainer >
                                <Table size="small">
                                    <TableHead  style={{ backgroundColor: '#1F3F49' }}>
                                        <TableRow>
                                            <TableCell>
                                              <TableSortLabel
                                                active={orderBy === 'name'}
                                                direction={orderBy === 'name' ? order : 'asc'}
                                                onClick={() => handleSortRequest('name')}
                                              >
                                                Name
                                              </TableSortLabel>
                                            </TableCell>
                                            <TableCell>
                                              <TableSortLabel
                                                active={orderBy === 'pid'}
                                                direction={orderBy === 'pid' ? order : 'asc'}
                                                onClick={() => handleSortRequest('pid')}
                                              >
                                               PatientId
                                              </TableSortLabel>
                                            </TableCell>
                                            <TableCell>AppointmentId</TableCell>
                                            <TableCell>DoctorId</TableCell>
                                            <TableCell>Units Required</TableCell>
                                            <TableCell>Unit</TableCell>
                                            <TableCell>Price</TableCell>
                                            <TableCell>Action</TableCell>
                                        </TableRow>
                                    </TableHead>
                                    <TableBody>
                                        {medicines.filter((m) => m.pid.toLowerCase().includes(searchValue.toLowerCase())||m.name.toLowerCase().includes(searchValue.toLowerCase())).slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((m) => (
                                            <TableRow key={m.id}>
                                                <TableCell>{m.name}</TableCell>
                                                <TableCell>{m.pid}<IconButton
                                                        
                                                    >
                                                        <Delete />
                                                    </IconButton>
</TableCell>
                                                <TableCell>{m.aid}</TableCell>
                                                <TableCell>{m.did}</TableCell>
                                                <TableCell>{m.quantity}</TableCell>
                                                <TableCell>{m.unit}</TableCell>
                                                <TableCell>{m.price}</TableCell>
                                                <TableCell>
                                                    <Button
                                                        type="submit"
                                                        variant="contained"
                                                        color="primary"
                                                    >
                                                        Bill
                                                    </Button>
                                                </TableCell>

                                            </TableRow>
                                        ))}
                                    </TableBody>
                                </Table>
                                <TablePagination
          rowsPerPageOptions={rowsPerPageOptions}
          component="div"
          count={medicines.length}
          rowsPerPage={rowsPerPage}
          page={page}
          onPageChange={handleChangePage}
          onRowsPerPageChange={handleChangeRowsPerPage}
        />
                            </TableContainer>
                        </CardContent>
                    </Card>
                </Grid>
            </Grid>
        </PageLayout>

    );
}
